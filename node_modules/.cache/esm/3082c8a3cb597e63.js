let express,Campground,Comment;_cb5‍.x([["default",()=>_cb5‍.o]]);_cb5‍.w("express",[["default",["express"],function(v){express=v}]]);_cb5‍.w("../views/models/campground",[["default",["Campground"],function(v){Campground=v}]]);_cb5‍.w("../views/models/comment",[["default",["Comment"],function(v){Comment=v}]]);
const router = express.Router()




// INDEX - show all campgrounds
router.get('/', (req, res) => {
    //retrive existing campgrounds from DB
    Campground.find({}, (err, campgrounds) => {
        err ?
            _cb5‍.g.console.log(err)
            :
            //display campgrounds from DB
            res.render('./campgrounds/index', { campgrounds: campgrounds })
    })
})

// NEW - show form to create new campground
router.get('/new', isLoggedIn, (req, res) => res.render('./campgrounds/new'))

// CREATE - add new campground to the DB coming from the form
router.post('/', (req, res) => {
    const author = {
        id: req.user._id,
        username: req.user.username
    }
    Campground.create({
        name: req.body.newCampName,
        image: req.body.newCampImage,
        description: req.body.newCampDescription,
        author: author
    },(err, campground) => { 
        err && _cb5‍.g.console.log(err) 
        })
    res.redirect('/campgrounds')
})

// SHOW - show infos about one campground
router.get('/:id', (req, res) => {
    Campground.findById(req.params.id).populate("comments").exec((err, foundCampground) => {
        if (err) {
            _cb5‍.g.console.log(err)
        } else {
            res.render('./campgrounds/show', { campground: foundCampground, currentDay: currentDay })
        }
    })
})

//EDIT - show form to update a campground
router.get('/:id/edit', checkCampOwnership, (req, res) => {
    Campground.findById(req.params.id, (err, foundCampground) => {
        res.render('./campgrounds/edit', { campground: foundCampground })
    })
})

//UPDATE - update a campground
router.put('/:id', checkCampOwnership, (req, res) => {
    Campground.findByIdAndUpdate(req.params.id, req.body.campground, (err, editedCamp) => {
        err ? _cb5‍.g.console.log(err) 
        :
        _cb5‍.g.console.log(req.body.campground);
        res.redirect('/campgrounds/' + req.params.id)
    })
})

//DELETE - delete a campground
router.delete('/:id',checkCampOwnership , (req, res) => {
    Campground.findByIdAndRemove(req.params.id, (err, removedCamp) => {
        err ? _cb5‍.g.console.log(err)
        :
        Comment.deleteMany({_id: {$in: removedCamp.comments}}, (err) => {
            err && _cb5‍.g.console.log(err);  
        })
    })
    res.redirect('/campgrounds')
})

//middleware - check if user is loggedin before access to secret page
function isLoggedIn(req, res, next) {
    if (req.isAuthenticated()) {
        return next();
    }
    res.redirect("/login");
}

function checkCampOwnership(req, res, next) {
    //check if user is logged in
    if (req.isAuthenticated()){
        //search for the selected campground
        Campground.findById(req.params.id, (err, foundCampground) => {
            if (err) {
                res.redirect('back')
            } else {
                //check if the actual user id match to the campground author id
                if (foundCampground.author.id.equals(req.user._id)) {
                    next()
                } else {
                    res.redirect('back')
                }
            }     
        })
    } else {
        res.redirect('back')
    }
}

//current DATE - used to display comments
const currentDay = Date.now()

_cb5‍.d(router);